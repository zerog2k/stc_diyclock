STC15Wxxx clock syncronisation with NMEA devices

enabled with -DWITH_NMEA in Makefile.
requires STC15W408AS cpu with > 4K flash.

- serial port speed can be changed in nmea.h according to your device:

    #define BAUDRATE 9600 // serial port speed (4800/9600 - standard for GPS)

- rebuild clock FW with -DWITH_NMEA CFLAGS, Makefile should be updated for large fw size

    STCCODESIZE ?= 8184
    SDCCOPTS ?= --code-size $(STCCODESIZE) --stack-auto --iram-size 256 --xram-size 256 --data-loc 0x30 --disable-warning 126 --disable-warning 59

  if you have a clock with STC15W408AS + voice + 3 buttons, compile it with

    SDCCREV ?= -Dstc15w408as

  otherwise, e.g. if you swapped STC15W404AS -> STC15W408AS, keep using

    SDCCREV ?= -Dstc15w404as

- timezone and dst settings are saved to EEPROM and reset on each reflash, 
  so cycle power of the clock after setting them for proper synchronization 
  in order to not wait for the next sync session.

- syncing will be paused after every successfull sync.
  default pause length is 6 hrs and can be changed in nmea.h:

    #define MIN_NMEA_PAUSE 21600 // min pause between syncs (sec) - 6hr

  pause will be reduced to 10 sec after leaving adjusting mode.


GPS syncronisation
------------------
- clock tested with NEO-6MV2 GPS module, works successfully.
  module has wide VCC range and can be connected directly to 5V.
  default serial port speed is 9600 baud.

NTP syncronisation
------------------
original idea and lua init example by onivan (https://github.com/onivan/stc_diyclock-ntp)

warning! there should be only one ESP8266 power source, 
so USB-TTL +5V line shouldn't be connected when powered from the clock!

- customize your nodemcu FW at https://nodemcu-build.com/index.php 
  with RTC fifo, RTC mem, RTC time, SNTP modules enabled, 
  download FW and flash your ESP8266.

- customize your init.lua:

  station_cfg.ssid="nautilus" -- SSID of your WiFi network
  station_cfg.pwd="xxxxxxxxxx"  -- password of your WiFi network
  -- set your static network parameters here
  net_ip     = "10.10.10.110"
  net_mask   = "255.255.255.0"
  net_gate   = "10.10.10.1"
  ntp_server = "pool.ntp.org"
  sync_delay = 480            -- sync once per X mins (480 == 8hrs)

- upload init.lua script to ESP8266 using ESPlorer or nodemcu-uploader:

  pip3 install nodemcu-uploader

  nodemcu-uploader upload init.lua

- reboot nodemcu with node.restart()

- check nodemcu running via serial console.
  there should be output like

  $GPRMC,232231.00,A,,,,,,,170420,,,*27

  you can test your nodemcu going to simple web page located
  at http://10.10.10.110 (configured address, updated once per minute).
  first connection to WiFi and NTP can last long, so be patient.
  clock will be synced after successfull NTP sync.

  please notice, the ES8266 is significantly warm during operation (up to 40 Celsius)
  and it can affect the temperature sensor if it is located close to the watch case.

- there is also init-cool.lua init which slighly differs from included init.lua
  it is RECOMMENDED to rename it to init.lua and upload to your ES8266 as init script.

  - uses DHCP mode by default (can be disabled with DHCP=0)
  - has no http server
  - after 2 successfull sync attempts it goes to deep sleep for 1 hr.
    so it consumes much less power and generates almost no heat.
    just rename it to init.lua before uploading to ESP866.
  notice: deep sleep function can only be used when
  ESP8266 PIN32(RST) and PIN8(XPD_DCDC aka GPIO16) are connected together.

